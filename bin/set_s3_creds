#!/usr/bin/env python

import argparse
import sys
import traceback

import six
from gbdx_auth import gbdx_auth

import gbdxcli
from gbdxcli import _s3creds

__version__ = gbdxcli.__version__

def main():

    parser = argparse.ArgumentParser(description="Set temporary S3 credentials into "
                                                 "configuration files and/or environment variables.",
                                     version=__version__)

    parser.add_argument("-a", "--awscli", dest="awscli", action="store_true",
                        required=False, default=False,
                        help="If True, then set temp s3 credentials in the awscli config file")

    parser.add_argument("-p", "--awscli_profile", dest="awscli_profile", metavar="<profile_name>",
                        type=str, required=False, default='temp',
                        help="Set the variables in the configuration in the specified profile")

    parser.add_argument("-s", "--s3cmd", dest="s3cmd", action="store_true",
                        required=False, default=False,
                        help="If True, then set temp s3 credentials in the s3cmd config file")

    parser.add_argument("--s3cmd_config", dest="s3cmd_config", default="~/.s3cfg", metavar="<config_file>",
                        type=str, required=False, help="Name of the config file for s3cmd")

    parser.add_argument("-e", "--environ", dest="environ", action="store_true",
                        required=False, default=False,
                        help="If True, then write temp s3 credentials to stdout")

    parser.add_argument("--environ_export", dest="environ_export", action="store_true",
                        required=False, help="If true, then prefix each environment variable with 'export'")

    parser.add_argument("-d", "--print_token", dest="print_token", action="store_true", required=False, default=False,
                        help="If set, then print the GBDX token information.")

    args = parser.parse_args()

    if not any((args.awscli, args.s3cmd, args.environ)):

        six.print_()
        six.print_("Must specify at least one of --awscli, --s3cmd or --environ.")
        six.print_()
        parser.print_help()
        sys.exit(1)

    try:
        gbdx_conn = gbdx_auth.get_session()

        if args.print_token:
            _s3creds.print_gbdx_token_info(gbdx_conn)

        _s3creds.set_temp_creds(gbdx_conn,
                                awscli=args.awscli, awscli_profile=args.awscli_profile,
                                s3cmd=args.s3cmd, s3cmd_config=args.s3cmd_config,
                                environ=args.environ, environ_export=args.environ_export)
    except Exception:
        traceback.print_exc()
        parser.error("An occurred.")
        sys.exit(1)


if __name__ == '__main__':
    main()